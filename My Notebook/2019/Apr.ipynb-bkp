{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### How to use if and else in list comprehension?"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "3 4 5\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "[64, 125]"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "def to_power(num, *args):\n",
    "    print(num, *args)\n",
    "    t = [\"Hey you din't pass args\" if not args else n**num for n in args]\n",
    "    return t\n",
    "\n",
    "lst = [3,4,5]\n",
    "to_power(*lst)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### How to find Euler constant?"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "2.718281828459045"
      ]
     },
     "execution_count": 28,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from math import e\n",
    "\n",
    "e"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "3.141592653589793"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from math import pi\n",
    "\n",
    "pi"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### How to fetch firstname and lastname?"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Manavalan\n",
      "Michale\n"
     ]
    }
   ],
   "source": [
    "name = 'Manavalan Michale'\n",
    "firstname, lastname = name.split()\n",
    "print(firstname)\n",
    "print(lastname)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'Kalyan Ravi'"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "firstname = 'Kalyan'\n",
    "lastname = ' Ravi'\n",
    "\n",
    "name = firstname + lastname\n",
    "name"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### How can I detection end of text file ?"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "     1\tone\r\n",
      "     2\ttwo\r\n",
      "     3\tthree\r\n"
     ]
    }
   ],
   "source": [
    "!cat -n  /home/mana/Work/fruits.txt"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'three'"
      ]
     },
     "execution_count": 23,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from pathlib import Path\n",
    "\n",
    "p = Path('/home/mana/Work/fruits.txt').read_text().splitlines()\n",
    "p[-1]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### How to pass arguments in Lambda function?"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "10"
      ]
     },
     "execution_count": 31,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "add = lambda x, y: x+y\n",
    "add(5, 5)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Return unique numbers"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[1, 2, 3, 5, 7]"
      ]
     },
     "execution_count": 26,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "l = [1,2,1,3,3,7,5,5]\n",
    "\n",
    "def unique_list(l):\n",
    "    return list(set(l))\n",
    "    \n",
    "unique_list(l)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[1, 2, 3, 7, 55, 56, 66, 89, 178]"
      ]
     },
     "execution_count": 36,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "l = [1,2,1,3,3,7,56,56,55,89,55,66,178]\n",
    "\n",
    "def unique_list(l):\n",
    "    return sorted(set(l))\n",
    "    \n",
    "unique_list(l)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Return maximum number"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 152,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "7"
      ]
     },
     "execution_count": 152,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "l = [1,2,1,3,3,7,1]\n",
    "\n",
    "def maximun(l):\n",
    "    return max(set(l))\n",
    "    \n",
    "maximun(l)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### If put input two same number then it will ask to re-enter the number again?"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 150,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "insert: 1\n",
      "insert: 1\n",
      "insert: 1\n",
      "1\n",
      "insert: 2\n",
      "insert: 1\n",
      "insert: 1\n",
      "2\n",
      "insert: 3\n",
      "insert: 1\n",
      "insert: 1\n",
      "2\n",
      "insert: 4\n",
      "insert: 2\n",
      "insert: 1\n",
      "3\n"
     ]
    }
   ],
   "source": [
    "inp = len(set([input('insert: ') for _ in range(3)]))          \n",
    "def chk(x):\n",
    "    print(x)\n",
    "    while x != 3:\n",
    "        x = len(set([input('insert: ') for _ in range(3)]))\n",
    "        print(x)\n",
    "chk(inp)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### How to save the position number of a list by their size to another list ?"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 78,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[2, 3, 1, 4]"
      ]
     },
     "execution_count": 78,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "lst = [122,22,33,1234]\n",
    "o = [chr(i) for i in lst]\n",
    "[lst.index(ord(j))+1 for  j in sorted(o)]\n"
   ]
  },
  {
   "cell_type": "raw",
   "metadata": {},
   "source": [
    "[2,4,3,1]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### How to reassgin variable?"
   ]
  },
  {
   "cell_type": "raw",
   "metadata": {},
   "source": [
    "Here a and b reassign to getting_points and total_points."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 104,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "76%\n"
     ]
    }
   ],
   "source": [
    "a = getting_points = 912\n",
    "b = total_points = 1200\n",
    "print('{:.0%}'.format(a/b))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Saturinan Month"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 189,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "  Mi   Rh   Ph   Ja   Ca   Ki   At   Ym\n",
      "   1    2    3    4    5    6    7    8\n",
      "  13   14   15   16   17   18   19   20\n",
      "  25   26   27   28   29   30   31   32\n",
      "  37   38   39   40   41   42   43   44\n"
     ]
    }
   ],
   "source": [
    "lst = range(1,9)\n",
    "\n",
    "print('{:>4} {:>4} {:>4} {:>4} {:>4} {:>4} {:>4} {:>4}'.format('Mi','Rh','Ph','Ja','Ca','Ki','At','Ym'))\n",
    "for i,j,k,l,m,n,o,p in zip(*[iter(lst)] *8):\n",
    "    print('{:4} {:4} {:4} {:4} {:4} {:4} {:4} {:4}'.format(i, j, k,l,m,n,o,p))\n",
    "lst = range(13,21)\n",
    "for i,j,k,l,m,n,o,p in zip(*[iter(lst)] *8):\n",
    "    print('{:4} {:4} {:4} {:4} {:4} {:4} {:4} {:4}'.format(i, j, k,l,m,n,o,p))\n",
    "lst = range(25,33)\n",
    "for i,j,k,l,m,n,o,p in zip(*[iter(lst)] *8):\n",
    "    print('{:4} {:4} {:4} {:4} {:4} {:4} {:4} {:4}'.format(i, j, k,l,m,n,o,p))\n",
    "lst = range(37,45)\n",
    "for i,j,k,l,m,n,o,p in zip(*[iter(lst)] *8):\n",
    "    print('{:4} {:4} {:4} {:4} {:4} {:4} {:4} {:4}'.format(i, j, k,l,m,n,o,p))\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "  Mi   Rh   Ph   Ja   Ca   Ki   At   Ym\n",
      "   1    2    3    4    5    6    7    8\n",
      "  13   14   15   16   17   18   19   20\n",
      "  25   26   27   28   29   30   31   32\n",
      "  37   38   39   40   41   42   43   44\n"
     ]
    }
   ],
   "source": [
    "lst = [[1,9],[13,21],[25,33],[37,45]]\n",
    "print('{:>4} {:>4} {:>4} {:>4} {:>4} {:>4} {:>4} {:>4}'\n",
    "      .format('Mi','Rh','Ph','Ja','Ca','Ki','At','Ym'))\n",
    "for x in lst:\n",
    "    for i,j,k,l,m,n,o,p in zip(*[iter(range(*x))] *8):\n",
    "        print('{:4} {:4} {:4} {:4} {:4} {:4} {:4} {:4}'.\n",
    "              format(i, j, k,l,m,n,o,p))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### How to get range arguments from list?"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "1\n",
      "2\n",
      "3\n",
      "4\n",
      "5\n",
      "6\n",
      "7\n",
      "8\n"
     ]
    }
   ],
   "source": [
    "lst = [1,9]\n",
    "\n",
    "for i in range(*lst):\n",
    "    print(i)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### How to format phone number?"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 60,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "PHONE NUMBER: 55842128269\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "'+91 55842 28269'"
      ]
     },
     "execution_count": 60,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "import random \n",
    "ph = ''.join([str(random.randint(1,9)) for _ in range(11)])\n",
    "print('PHONE NUMBER:',ph)\n",
    "'+91 {} {}'.format(ph[0:5],ph[6:])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 61,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "PHONE NUMBER: 83772423101\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "'+91 83772 23101'"
      ]
     },
     "execution_count": 61,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "import numpy as np\n",
    "\n",
    "ph = ''.join([str(i) for i in np.random.randint(10, size=11)])\n",
    "print('PHONE NUMBER:',ph)\n",
    "'+91 {} {}'.format(ph[0:5],ph[6:])"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Write the data of a csv file into a text file"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "no, name, city\r\n",
      "1, Ma, tu\r\n",
      "2, Hs, mt\r\n"
     ]
    }
   ],
   "source": [
    "!cat /home/mana/Work/sample.csv"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {
    "slideshow": {
     "slide_type": "slide"
    }
   },
   "outputs": [],
   "source": [
    "from pathlib import Path\n",
    "\n",
    "p = Path('/home/mana/Work/sample.csv').read_text().replace(',','')\n",
    "print(p, file=open('/home/mana/Work/sample.txt','w'))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 51,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "no name city\r\n",
      "1 Ma tu\r\n",
      "2 Hs mt\r\n",
      "\r\n"
     ]
    }
   ],
   "source": [
    "!cat /home/mana/Work/sample.txt"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### How to convert csv from text?"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "100,Chennai,Manavalan,Micheal\n"
     ]
    }
   ],
   "source": [
    "line = '100 Chennai Manavalan Micheal'\n",
    "print(*line.split(), sep =',')"
   ]
  },
  {
   "cell_type": "raw",
   "metadata": {},
   "source": [
    "If you want write csv file, use this code."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "metadata": {},
   "outputs": [],
   "source": [
    "line = '100 Chennai Manavalan Micheal'\n",
    "print(*line.split(), sep =',', file=open('/home/mana/Work/add.csv','w'))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 136,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "100,Chennai,Manavalan,Micheal\r\n"
     ]
    }
   ],
   "source": [
    "!cat /home/mana/Work/add.csv"
   ]
  },
  {
   "cell_type": "raw",
   "metadata": {},
   "source": [
    "- takes one integer from user an input (X)\n",
    "- calculates the reminder of X when it is divided by 9\n",
    "- if the reminder is greater than 1 then output x^2\n",
    "- if the reminder is smaller than or equal to 1 then output 2^x on monitor"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 52,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{0: 0, 1: 1, 2: 2, 3: 3, 4: 4, 5: 5, 6: 6, 7: 7, 8: 8, 9: 0, 10: 1, 11: 2}"
      ]
     },
     "execution_count": 52,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "{i:i%9 for i in range(12)}\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Insert:4\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "16"
      ]
     },
     "execution_count": 1,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "(lambda x: x%9 > 1 and x**2 or 2**x)(int(input('Insert:')))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Insert:9\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "512"
      ]
     },
     "execution_count": 2,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "(lambda x: x%9 > 1 and x**2 or 2**x)(int(input('Insert:')))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Insert:5\n",
      "25\n"
     ]
    }
   ],
   "source": [
    "integer = (int(input('Insert:')))\n",
    "if integer%9 > 1:\n",
    "    print(integer**2)\n",
    "else:\n",
    "    print(2**integer)\n",
    "    "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### What is remainder of 1 to 10. if diveded by 3\n",
    "This is one of kids program to improve their maths"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{0: 0, 1: 1, 2: 2, 3: 0, 4: 1, 5: 2, 6: 0, 7: 1, 8: 2, 9: 0, 10: 1}"
      ]
     },
     "execution_count": 37,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "{i:i%3 for i in range(11)}"
   ]
  },
  {
   "cell_type": "raw",
   "metadata": {},
   "source": [
    "A new fighting game has become popular. There are N number of villains with each having some strength. \n",
    "There are N players in the game with each having some energy. The energy is used to kill the villains. \n",
    "The villain can be killed only if the energy of the player is greater than the strength of the villain. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 135,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Villan strength: 13\n",
      "Player strength: 6\n",
      "Villan strength: 12\n",
      "Player strength: 6\n",
      "Villan strength: 12\n",
      "Player strength: 7\n",
      "Villan strength: 15\n",
      "Player strength: 10\n",
      "Villan strength: 14\n",
      "Player strength: 10\n",
      "Villan strength: 14\n",
      "Player strength: 11\n",
      "WIN\n"
     ]
    }
   ],
   "source": [
    "villan = 10\n",
    "player = 6\n",
    "villan_strength = 3\n",
    "player_enegry = 2\n",
    "\n",
    "while player < villan : \n",
    "    if player > 3:\n",
    "        villan += villan_strength\n",
    "        print('Villan strength:',villan)\n",
    "        print('Player strength:',player)\n",
    "    villan -= 1\n",
    "    print('Villan strength:',villan)\n",
    "    print('Player strength:',player)\n",
    "    player += 1\n",
    "    print('Villan strength:',villan)\n",
    "    print('Player strength:',player)\n",
    "    player += villan_strength\n",
    "    if player == 11:\n",
    "        player += player_enegry**player_enegry\n",
    "        print('Villan strength:',villan)\n",
    "        print('Player strength:',player) \n",
    "else:\n",
    "    if player+1 == 15:\n",
    "        print('WIN')\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### How to search a paragraph if you know the first word of it? "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 138,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Distributions include the Linux kernel and supporting system software and libraries, many of which are provided by the GNU Project. Many Linux distributions use the word \"Linux\" in their name, but the Free Software Foundation uses the name GNU/Linux to emphasize the importance of GNU software, causing some controversy.[15][16]\r\n",
      "\r\n",
      "Popular Linux distributions[17][18][19] include Debian, Fedora, and Ubuntu. Commercial distributions include Red Hat Enterprise Linux and SUSE Linux Enterprise Server. \r\n",
      "Desktop Linux distributions include a windowing system such as X11 or Wayland, and a desktop environment such as GNOME or KDE Plasma. \r\n",
      "Distributions intended for servers may omit graphics altogether, and include a solution stack such as LAMP. Because Linux is freely redistributable, anyone may create a distribution for any purpose.\r\n"
     ]
    }
   ],
   "source": [
    "!cat /home/mana/Work/para.txt"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Enter Text: Desktop\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "['Desktop Linux distributions include a windowing system such as X11 or Wayland, and a desktop environment such as GNOME or KDE Plasma. ']"
      ]
     },
     "execution_count": 1,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from pathlib import Path\n",
    "\n",
    "inp = input('Enter Text: ').swapcase()\n",
    "p = Path('/home/mana/Work/para.txt').read_text().splitlines()\n",
    "[i for i in p if i.swapcase().startswith(inp)]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### How to fetch particular item in list in dictionary?"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "manavalan \n"
     ]
    }
   ],
   "source": [
    "lst =[{\"no\":2,\"name\":\"manavalan \",\"email\":\"xxxx@gmail.com\"}]\n",
    "for i in lst:\n",
    "    print(i['name'])"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Which one largest number?"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "7"
      ]
     },
     "execution_count": 23,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "n1 = 4 \n",
    "n2 = 7\n",
    "n3 = 1\n",
    "max(n1,n2,n3)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[1, 3, 6, 9]"
      ]
     },
     "execution_count": 1,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "num = [6, 9, 3, 1]\n",
    "num.sort()\n",
    "num"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "ename": "TypeError",
     "evalue": "'<' not supported between instances of 'str' and 'int'",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mTypeError\u001b[0m                                 Traceback (most recent call last)",
      "\u001b[0;32m<ipython-input-3-56b021f7fe3c>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[1;32m      1\u001b[0m \u001b[0mstr_num\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m[\u001b[0m\u001b[0;36m5\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m\"1\"\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;36m100\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m\"34\"\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 2\u001b[0;31m \u001b[0mstr_num\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0msort\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m",
      "\u001b[0;31mTypeError\u001b[0m: '<' not supported between instances of 'str' and 'int'"
     ]
    }
   ],
   "source": [
    "str_num = [5, \"1\", 100, \"34\"]\n",
    "str_num.sort()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### How to sorted mixed data type?\n",
    "Normally, if you sorted mixed data type, you will get error like this\n",
    "\n",
    "TypeError: '<' not supported between instances of 'str' and 'int'\n",
    "\n",
    "But this method you can sorted mixed data types."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[2.3, 5, 100, '1', '34']"
      ]
     },
     "execution_count": 26,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "str_num = [5, \"1\", 100, 2.3, \"34\"]\n",
    "s1 = [i for i in str_num if isinstance(i,int) or isinstance(i,float)]\n",
    "s2 = [j for j in str_num if isinstance(j,str)]\n",
    "str_num = sorted(s1) + sorted(s2)\n",
    "str_num"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### How to merge two array?"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### How to craete order numbers one dimensional array?"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[0, 1, 2, 3, 4, 5, 6, 7, 8]"
      ]
     },
     "execution_count": 28,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "array = [_ for _ in range(9)]\n",
    "array"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### How to craete sequences numbers one dimensional array using numpy?"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9])"
      ]
     },
     "execution_count": 30,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "import numpy as np\n",
    "\n",
    "a = np.arange(10)\n",
    "a"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Convert int to str"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "1 6 11 16 21 26 31 36 41 46\n"
     ]
    }
   ],
   "source": [
    "print(*map(str,range(1,50,5)))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### How to pass arguments to map  of list of list?"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "60758"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "list_of_lists = [[1,5534,123,67,8673,243] , [56,2,123,7,3],\n",
    "                 [546,24,5,7,86,45234,24 ]]\n",
    "sums = map(sum, list_of_lists)\n",
    "sum_of_sums = sum(sums)\n",
    "sum_of_sums"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### How to sum list of list?"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "60758"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "list_of_list = [[1,5534,123,67,8673,243] , [56,2,123,7,3],\n",
    "                 [546,24,5,7,86,45234,24 ]]\n",
    "sum([sum(i) for i in list_of_list])"
   ]
  },
  {
   "cell_type": "raw",
   "metadata": {},
   "source": [
    "Data\n",
    "Data1\n",
    "0\n",
    "Con1\n",
    "Reg1\n",
    "Attributes1\n",
    "Ex1\n",
    "1\n",
    "Con1\n",
    "Lang1\n",
    "Attributes\n",
    "Ex1\n",
    "\n",
    "In these type of file while I read the data from Con1 I should get both the columns Reg1 and Lang1. As Lang1 is not available in entity 0 then Null is okay. But in the final output I am unable to get Reg1 and Lang1 as separate columns. Please help me how can I achieve it as separate columns in the output file"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {},
   "outputs": [],
   "source": [
    "d1 = '0 Con1 Reg1'\n",
    "d2 = '1 Con1 Lang1'\n",
    "\n",
    "for i in d1,d2:\n",
    "    print(*i.split(), sep = ',', file = open('/home/mana/Work/avi.csv','a+'))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0,Con1,Reg1\r\n",
      "1,Con1,Lang1\r\n"
     ]
    }
   ],
   "source": [
    "!cat /home/mana/Work/avi.csv"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### How to access  each in element multidiemensional array?\n",
    "Generally, if we access each element multidiemensional array, we should use multiple loop to access \n",
    "\n",
    "each element.  \n",
    "\n",
    "if multidiemensional array is too large. it is not possible. But we can access each element \n",
    "\n",
    "using numpy. if multidiemensional array too large.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[ 0,  1,  2],\n",
       "       [ 3,  4,  5],\n",
       "       [ 6,  7,  8],\n",
       "       [ 9, 10, 11],\n",
       "       [12, 13, 14]])"
      ]
     },
     "execution_count": 27,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "import numpy as np\n",
    "\n",
    "arry = np.arange(15).reshape(5,3)\n",
    "arry"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0\n",
      "1\n",
      "2\n",
      "3\n",
      "4\n",
      "5\n",
      "6\n",
      "7\n",
      "8\n",
      "9\n",
      "10\n",
      "11\n",
      "12\n",
      "13\n",
      "14\n"
     ]
    }
   ],
   "source": [
    "import numpy as np\n",
    "\n",
    "arry = np.arange(15).reshape(5,3)\n",
    "for i in range(np.size(arry,0)):\n",
    "    for j in arry[i]:\n",
    "        print(j)\n",
    "    "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Unit converter: Miles and Kilometers"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "1. Kilometers to Miles\n",
      "2. Miles to Kilometers\n",
      "Which conversion would you like to do?: 1\n",
      "Enter distance in kilometers: 100\n",
      "Distance in miles: 62\n"
     ]
    }
   ],
   "source": [
    "'''\n",
    "Unit converter: Miles and Kilometers\n",
    "'''\n",
    "print('1. Kilometers to Miles')\n",
    "print('2. Miles to Kilometers')\n",
    "\n",
    "def km_miles():\n",
    "    km = float(input('Enter distance in kilometers: '))\n",
    "    miles = km / 1.609\n",
    "    print('Distance in miles: {0:.0f}'.format(miles))\n",
    "def miles_km():\n",
    "    miles = float(input('Enter distance in miles: '))\n",
    "    km = miles * 1.609\n",
    "    print('Distance in kilometers: {0:.f}'.format(km))\n",
    "\n",
    "if __name__ == '__main__':\n",
    "    choice = input('Which conversion would you like to do?: ') \n",
    "    \n",
    "if choice == '1':\n",
    "    km_miles()\n",
    "\n",
    "if choice == '2':\n",
    "    miles_km()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### How to check condition as well store variable?"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Please enter your city: Madurai\n",
      "Please enter your age: 23\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "True"
      ]
     },
     "execution_count": 15,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "city = input(\"Please enter your city: \")\n",
    "age = int(input(\"Please enter your age: \"))\n",
    "city1 = 'Chennai'\n",
    "city2 = 'Madurai'\n",
    "min_age = 21\n",
    "\n",
    "its_okay = city == city1 or city2 and age >= min_age\n",
    "its_okay"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### How to create xml tag from text?"
   ]
  },
  {
   "cell_type": "raw",
   "metadata": {},
   "source": [
    "input : address/name/fname \n",
    "output: <address><name><fname> </fname></name></address>"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 268,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<address><name><fname> </fname></name></address>\n"
     ]
    }
   ],
   "source": [
    "inp = 'address/name/fname'\n",
    "\n",
    "for i in [inp.split('/')]:\n",
    "    print('<{0}><{1}><{2}> </{2}></{1}></{0}>'.format(i[0],i[1],i[2]))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### How to generate random character?"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "BH4VH7R0KKLWUP3LOHQ2GQVL\n"
     ]
    }
   ],
   "source": [
    "import random\n",
    "\n",
    "l=[x for x in range(0,10)]\n",
    "f=[chr(y) for y in range(65,90)]\n",
    "c=l+f\n",
    "v = [random.choices(c,k=2) for t in range(12)]\n",
    "print(*sum(v,[]),sep='')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### How to generate random alpha numeric character?"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "rfxltQB2GKW1\n"
     ]
    }
   ],
   "source": [
    "from string import ascii_uppercase,ascii_lowercase,digits\n",
    "\n",
    "print(*random.choices(ascii_uppercase+ascii_lowercase+digits,k=12), sep = '')\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### How to generate password?"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 43,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "1qIPZ&8e\n"
     ]
    }
   ],
   "source": [
    "from string import ascii_uppercase,ascii_lowercase,digits,punctuation\n",
    "\n",
    "print(*random.choices(ascii_uppercase+ascii_lowercase+digits+punctuation,k=8), sep = '')\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 46,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "S7LDI5SIR8W1\n"
     ]
    }
   ],
   "source": [
    "from string import ascii_uppercase,digits\n",
    "import random\n",
    "\n",
    "print(*random.choices(ascii_uppercase+digits,k=12), sep = '')\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### How to read a file line by line store it into an array?"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 50,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "one\r\n",
      "two\r\n",
      "three\r\n"
     ]
    }
   ],
   "source": [
    "!cat /home/mana/Work/fruits.txt"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "['one', 'two', 'three']"
      ]
     },
     "execution_count": 2,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from pathlib import Path\n",
    "\n",
    "Path('/home/mana/Work/fruits.txt').read_text().splitlines()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 67,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "['one\\n', 'two\\n', 'three\\n']"
      ]
     },
     "execution_count": 67,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "with open('/home/mana/Work/fruits.txt') as f:\n",
    "    r = f.readlines()\n",
    "    \n",
    "r"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Generate password using string module"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 226,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "J)bLO**4\n"
     ]
    }
   ],
   "source": [
    "from string import ascii_letters,digits\n",
    "import random\n",
    "\n",
    "c = ascii_letters+digits+'#$%&\\()*+-@*?:'\n",
    "print(*random.choices(c,k=8), sep = '')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### How to generate secure password?"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 262,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "o?sI*pj9\n"
     ]
    }
   ],
   "source": [
    "from string import ascii_letters,digits\n",
    "from random import choices\n",
    "import re\n",
    "\n",
    "def gnerate_password():\n",
    "    global passwd\n",
    "    global match\n",
    "    c = ascii_letters+digits+'#$%&\\()*+-@*?:'\n",
    "    passwd = ''.join(choices(c,k=8))\n",
    "    rgx = ['\\W', '[a-z]', '[A-Z]', '\\d']\n",
    "    match = list(filter(lambda x: re.search(r''+x+'',passwd), rgx))\n",
    "\n",
    "gnerate_password() \n",
    "\n",
    "while True:\n",
    "    if len(match) == 4:\n",
    "        print(passwd)\n",
    "        break\n",
    "    else:\n",
    "        gnerate_password() \n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### How much data download and upload since booting?"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Netwok-card            Download            Upload\n",
      "**************************************************\n",
      "ens32:                    0B                  0B\n",
      "enxfcde56ff0106:         1.0G               98.2M\n"
     ]
    }
   ],
   "source": [
    "from pathlib import Path\n",
    "import bisect\n",
    "import re\n",
    "\n",
    "size = [1, 2**10, 2**20, 2**30] ## GiB\n",
    "unit = ['B', 'K', 'M', 'G']\n",
    "\n",
    "def con(byts):\n",
    "    if byts != 0:\n",
    "        index = bisect.bisect(size, byts) -1\n",
    "        return \"{:.1f}{}\".format(byts/size[index], unit[index])\n",
    "    else: \n",
    "        return '0B'\n",
    "    \n",
    "print('{} {:^30} {}'.format('Netwok-card','Download','Upload'))\n",
    "print('*'*50)\n",
    "p = Path('/proc/net/dev').read_text().splitlines()\n",
    "net = {i.split()[0]: [i.split()[1], i.split()[9]] for i in p\n",
    "       if re.search(r'eth|wlan|enx|ens',i)}\n",
    "\n",
    "for j in net:\n",
    "    down,up = net[j]\n",
    "    print('{:<15} {:>12} {:>19}'.format(j,con(int(down)), con(int(up))))\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 396,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Netwok-card            Download            Upload\n",
      "enxfcde56ff0106:       971.6M              601.3M\n",
      "ens32:                    0B                  0B\n"
     ]
    }
   ],
   "source": [
    "import bisect\n",
    "import re\n",
    "\n",
    "size = [1, 2**10, 2**20, 2**30] ## GiB\n",
    "unit = ['B', 'K', 'M', 'G']\n",
    "\n",
    "def con(byts):\n",
    "    if byts != 0:\n",
    "        index = bisect.bisect(size, byts) -1\n",
    "        return \"{:.1f}{}\".format(byts/size[index], unit[index])\n",
    "    else: \n",
    "        return '0B'\n",
    "\n",
    "print('{} {:^30} {}'.format('Netwok-card','Download','Upload'))\n",
    "with open('/proc/net/dev') as nop:\n",
    "    for i in nop.readlines():\n",
    "        if re.search(r'eth|wlan|enx|ens',i):\n",
    "            j = i.split()[0:10]            \n",
    "            print(\"{:<15} {:>12} {:>19}\".\n",
    "                  format(j[0],con(int(j[1])),con(int(j[-1]))))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### How to manipulate  **kwargs?"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 397,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "key: Name\n",
      "Value: Manavalan\n",
      "key: city\n",
      "Value: Chennai\n"
     ]
    }
   ],
   "source": [
    "my_dict = {'Name': 'Manavalan', 'city': 'Chennai'}\n",
    "\n",
    "def fn(**kwargs):\n",
    "    for i in kwargs:\n",
    "        print('key:',i)\n",
    "        print('Value:',kwargs[i])\n",
    "    \n",
    "      \n",
    "fn(**my_dict)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 398,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "key: Name\n",
      "Value: Manavalan\n",
      "key: city\n",
      "Value: Chennai\n"
     ]
    }
   ],
   "source": [
    "def fn(**kwargs):\n",
    "    for i in kwargs:\n",
    "        print('key:',i)\n",
    "        print('Value:',kwargs[i])\n",
    "    \n",
    "      \n",
    "fn(Name = 'Manavalan', city = 'Chennai')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### How to collect system infromation using python?"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "OS: Ubuntu 18.04 bionic\n",
      "CPU \t: Intel(R) Core(TM)2 Duo CPU     E8400  @ 3.00GHz\n",
      "Memory Size: 4 GB\n",
      "Hard Disk: 120 GB\n"
     ]
    }
   ],
   "source": [
    "from pathlib import Path\n",
    "import platform\n",
    "\n",
    "print('OS:',*platform.dist())\n",
    "q = Path('/proc/cpuinfo').read_text().splitlines()\n",
    "cpu = [j for j in q if j.startswith('model name')]\n",
    "print('CPU',cpu[0].replace('model name',''))\n",
    "r = Path('/proc/meminfo').read_text().splitlines()\n",
    "mem = [k for k in r if k.startswith('MemTotal')]\n",
    "print('Memory Size:',round(int(mem[0].split()[1])/1024/1024), 'GB')\n",
    "s = Path('/sys/block/sda/size').read_text().splitlines()\n",
    "print('Hard Disk:',round(int(s[0])*512/1000/1000/1000), 'GB')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### How to find Disk Model and Serial number?"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "ata-KINGSTON\n",
      "SA400S37120G\n"
     ]
    }
   ],
   "source": [
    "import os\n",
    "import re\n",
    "\n",
    "f = os.listdir('/dev/disk/by-id')\n",
    "disk = [i.split('_')[0:2] for i in f if i.startswith('ata')]\n",
    "model, model_nimber = disk[0]\n",
    "print(model, model_nimber, sep ='\\n')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### List size of files"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "24.8M    Learning_Python_5th_Edition_Mark.pdf\n",
      "16.6M    Automate-the-boring-stuff-with-python-2015.pdf\n",
      "14.2M    The Python 3 Standard Library by Example.pdf\n",
      "7.8M     Python-Docs-Library.pdf\n",
      "5.4M     Python Crash Course.pdf\n",
      "5.3M     Python Notes For Professionals.pdf\n",
      "5.2M     Pro Python System Administration (2nd ed.) [Sileika 2014-11-27].pdf\n",
      "4.8M     How-to-code-in-python-Digital Ocean.pdf\n",
      "4.2M     Problem Solving with Algorithms and DataStructures.pdf\n",
      "3.7M     Starting Out with Python (2nd ed.) [Gaddis 2011-03-18].pdf\n",
      "3.4M     Python for Unix and Linux System Administration.pdf\n",
      "2.9M     Python3-Tutorial Point.pdf\n",
      "2.8M     Python standard library by example.pdf\n",
      "2.6M     Python Useful Modules.pdf\n",
      "2.4M     Python Essential Reference, Fourth Edition (2009)-Library.pdf\n",
      "2.3M     Programiz Python tutorial.pdf\n",
      "2.0M     Python System Programming Book.pdf\n",
      "996.8K   Parsing Tools and Libraries.pdf\n",
      "729.2K   Python 3 Quick Guide.pdf\n",
      "707.3K   pysheeet.pdf\n",
      "559.4K   Python-Docs-Tutorial.pdf\n",
      "480.7K   python-guide.pdf\n",
      "434.1K   Learn Python3 in 30 Minutes.pdf\n"
     ]
    }
   ],
   "source": [
    "import os\n",
    "from os.path import getsize as gts\n",
    "import bisect\n",
    "\n",
    "#size = [1, 1e+3, 1e+6, 1e+9]\n",
    "size = [1, 2**10, 2**20, 2**30]\n",
    "unit = ['B', 'K', 'M', 'G']\n",
    "path = '/home/mana/Study Python'\n",
    "files = [(i, gts(os.path.join(path,i))) \n",
    "         for i in os.listdir(path)]\n",
    "fsort = sorted(files, key = lambda x: x[1], reverse = True)\n",
    "\n",
    "def convert(byts):\n",
    "    if byts != 0:\n",
    "        index = bisect.bisect(size, byts) -1\n",
    "        return \"{:.1f}{}\".format(byts/size[index], unit[index])\n",
    "    else: \n",
    "        return '0B'\n",
    "\n",
    "for j,k in fsort :\n",
    "    print('{:8} {}'.format(convert(k),j))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### uptime"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      " 12:33:14 up 1 day,  3:51,  1 user,  load average: 0.52, 0.32, 0.15\n"
     ]
    }
   ],
   "source": [
    "%%bash\n",
    "\n",
    "uptime"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "1 day, 3:51\n"
     ]
    }
   ],
   "source": [
    "%%python3\n",
    "from pathlib import Path as Pa\n",
    "from datetime import timedelta\n",
    "\n",
    "u = Pa('/proc/uptime').read_text().split()[0]\n",
    "t = timedelta(seconds = float(u))\n",
    "print(str(t).rpartition(':')[0])\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### How to list all files?"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "add.csv\r\n",
      "avi.csv\r\n",
      "fruits.txt\r\n",
      "para.txt\r\n",
      "sample.csv\r\n",
      "sample.txt\r\n"
     ]
    }
   ],
   "source": [
    "!ls -1 /home/mana/Work"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "add.csv\n",
      "sample.txt\n",
      "sample.csv\n",
      "fruits.txt\n",
      "para.txt\n",
      "avi.csv\n"
     ]
    }
   ],
   "source": [
    "import os\n",
    "\n",
    "print(*os.listdir('/home/mana/Work'), sep ='\\n')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Disk Usage"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Filesystem             Size      Used      Avail      Mounted-on\n",
      "****************************************************************\n",
      "/dev/sda1              110G       13G       97G       /                   \n"
     ]
    }
   ],
   "source": [
    "from pathlib import Path\n",
    "from os import statvfs as svfs\n",
    "import re\n",
    "import bisect\n",
    "\n",
    "#size = [1, 1e+3, 1e+6, 1e+9]      ## GB\n",
    "size = [1, 2**10, 2**20, 2**30]  ## GiB\n",
    "unit = ['B', 'K', 'M', 'G']\n",
    "mline = Path('/proc/mounts').read_text().splitlines()\n",
    "mdev = [lp.split()[:2] for lp in mline \n",
    "        if re.match(r'^/dev/sd[a-z][1-9]', lp)]\n",
    "clt = [(fsl,svfs(mpl)[0]*svfs(mpl)[2],svfs(mpl)[0]*svfs(mpl)[3],mpl)\n",
    "       for fsl, mpl in mdev]\n",
    "\n",
    "def con(byts):\n",
    "    index = bisect.bisect(size, byts)-1\n",
    "    return \"{:.0f}{}\".format(byts/size[index], unit[index])\n",
    "\n",
    "print('{:20} {:^9} {:^9} {:^9} {:>13}'.\n",
    "      format('Filesystem','Size','Used','Avail','Mounted-on'))\n",
    "print('*'*64)\n",
    "for fs in clt:\n",
    "     print('{:20} {:^9} {:^9} {:^9}    {:20}'.\n",
    "           format(fs[0],con(fs[1]),con(fs[1]-fs[2]),con(fs[2]),fs[3]))   \n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### How to convert decimal to binary?"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Enter Decimal Number:10\n",
      "1010\n"
     ]
    }
   ],
   "source": [
    "inp = int(input('Enter Decimal Number:'))\n",
    "print('{:b}'.format(inp))\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "              total        used        free      shared  buff/cache   available\r\n",
      "Mem:           3.9G        974M        1.9G        220M        1.0G        2.4G\r\n",
      "Swap:          2.0G          0B        2.0G\r\n"
     ]
    }
   ],
   "source": [
    "!free -h"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Total-Mem       Mem-Used           Mem-Free\n",
      "    4G             2G                 2G        \n"
     ]
    }
   ],
   "source": [
    "from pathlib import Path\n",
    "import bisect\n",
    "\n",
    "#size = [1, 1e+3, 1e+6]\n",
    "size = [1, 2**10, 2**20, 2**30] ## GiB\n",
    "unit = ['K', 'M', 'G']\n",
    "\n",
    "memt, memf = Path('/proc/meminfo').read_text().splitlines()[0:3:2]\n",
    "mt,mf = int(memt.split()[1]), int(memf.split()[1])\n",
    "mu = mt - mf\n",
    "\n",
    "def convert(kb):\n",
    "    index = bisect.bisect(size, kb) -1\n",
    "    return \"{:.0f}{}\".format(kb/size[index],unit[index])\n",
    "\n",
    "print('{:15} {:18} {}'.format('Total-Mem', 'Mem-Used', 'Mem-Free'))\n",
    "print('{:^10} {:^18} {:^18}'.format(convert(mt), convert(mu), convert(mf)))\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### How to make substitute ?"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "apple\r\n",
      "mango\r\n",
      "\r\n"
     ]
    }
   ],
   "source": [
    "!cat /home/mana/Work/sample.txt"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "anotherapple\n",
      "mango\n",
      "\n"
     ]
    }
   ],
   "source": [
    "%%bash\n",
    "\n",
    "sed -i 's/apple/anotherapple/g' /home/mana/Work/sample.txt"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "['anotherapple', 'mango']\n"
     ]
    }
   ],
   "source": [
    "%%python3\n",
    "\n",
    "from pathlib import Path\n",
    "from re import sub\n",
    "\n",
    "p = Path('/home/mana/Work/sample.txt').read_text().split()\n",
    "resub = [sub(r'apple','anotherapple',i) for i in p]\n",
    "print(resub)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Check server health"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Server running smooth.\n"
     ]
    }
   ],
   "source": [
    "import os\n",
    "\n",
    "if os.getloadavg()[0] > os.cpu_count():\n",
    "    print('Server going critical stage.')\n",
    "else:\n",
    "    print('Server running smooth.')\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### How to count that how many dot charcater used in text string?"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "5"
      ]
     },
     "execution_count": 21,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "import re\n",
    "\n",
    "text = 'Hello.....?'\n",
    "dot = [i for i in text if re.match('\\.',i) ]\n",
    "len(dot)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### How to find that how days before file modified?"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "-rw-rw-r-- 1 mana mana 30 May  4 20:45 /home/mana/Work/add.csv\r\n"
     ]
    }
   ],
   "source": [
    "!ls -l /home/mana/Work/add.csv"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "add.csv --> 13 days before.\n"
     ]
    }
   ],
   "source": [
    "from datetime import date\n",
    "from pathlib import Path\n",
    "\n",
    "p = Path('/home/mana/Work/add.csv')\n",
    "f = [(p,date.today()- date.fromtimestamp(p.stat()[-2]))]\n",
    "\n",
    "for x,y in f:\n",
    "    print('{} --> {} days before.'.format(x.name,y.days))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Count line start \"warning\" word in a file."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 42,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "WARNING: systemd-networkd is not running, output will be incomplete.\r\n",
      "May 17 00:42:03 joe mate-session[971]: WARNING: Unable to find provider.\r\n",
      "May 17 00:42:15 joe kernel: [   23.494527] random: 7 urandom warning(s) .\r\n",
      "WARNING Failed to open.\r\n"
     ]
    }
   ],
   "source": [
    "!cat /home/mana/Work/warn.txt"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "2"
      ]
     },
     "execution_count": 38,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from pathlib import Path\n",
    "\n",
    "p = Path('/home/mana/Work/warn.txt').read_text().splitlines()\n",
    "len([i for i in p if i.casefold().startswith('warning') ])"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### How to print file contents in Upper case?"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "WARNING: systemd-networkd is not running, output will be incomplete.\r\n",
      "May 17 00:42:03 joe mate-session[971]: WARNING: Unable to find provider.\r\n",
      "May 17 00:42:15 joe kernel: [   23.494527] random: 7 urandom warning(s) .\r\n",
      "WARNING Failed to open.\r\n"
     ]
    }
   ],
   "source": [
    "!cat /home/mana/Work/warn.txt"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 41,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "WARNING: SYSTEMD-NETWORKD IS NOT RUNNING, OUTPUT WILL BE INCOMPLETE.\n",
      "MAY 17 00:42:03 JOE MATE-SESSION[971]: WARNING: UNABLE TO FIND PROVIDER.\n",
      "MAY 17 00:42:15 JOE KERNEL: [   23.494527] RANDOM: 7 URANDOM WARNING(S) .\n",
      "WARNING FAILED TO OPEN.\n"
     ]
    }
   ],
   "source": [
    "from pathlib import Path\n",
    "\n",
    "p = Path('/home/mana/Work/warn.txt').read_text().splitlines()\n",
    "cont = [i.upper() for i in p]\n",
    "print(*cont, sep = '\\n')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### How to write Bash script in Jupyter Editor?"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "##### How to find set of website up or down?"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 44,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "google.com\r\n",
      "facebook.com\r\n",
      "twitter.com\r\n",
      "tamilrockers.ca\r\n"
     ]
    }
   ],
   "source": [
    "!cat /home/mana/Work/host.txt"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 46,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "google.com-->host Up\n",
      "facebook.com-->host Up\n",
      "twitter.com-->host Up\n",
      "tamilrockers.ca-->host down\n"
     ]
    }
   ],
   "source": [
    "%%bash\n",
    "\n",
    "while read name\n",
    "do \n",
    "echo -n \"$name-->\"\n",
    "(curl -Is $name | grep -i \"location\" &> /dev/null) && echo \"host Up\" \\\n",
    "|| echo \"host down\" \n",
    "done < /home/mana/Work/host.txt\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.6.7"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
